<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>using <#= Settings.ApplicationName #>.core;
using <#= Settings.ApplicationName #>.data.Services;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace <#= Settings.ApplicationName.ToSchemaName()#>.web.core.ViewModels
{
	public partial class <#= this.Entity.Name #>ViewModel
	{
<# foreach(var field in this.Entity.Fields.Where(x => !x.IgnoreOnUpdate && !x.Secure)) {
#><# if (!field.IsNullable && !field.IsAudit) {#>        [Required]
<#}#><# if (field.Description != null || field.Name != field.Name.ToSchemaName()){
#><#="        [Display(Name = \"" + (field.Description ?? field.Name) + "\")]"#>
<#} if (field.References != null) {
#>        [Select2("/api/select2/get<#= field.References.Name.ToLowerCase() #>s"<#
				  #>, "<#= field.References.KeyField.Name.ToSchemaName() #>"<#
				  #>, "<#= field.References.NameField.Name.ToSchemaName() #>"<#
				  #>, "<#= field.References.Name.ToSchemaName() #>"<#= (field.Prefetch ? " , prefetch : true" : "" )
				  #><#= (field.ProcessFunction == null ? "" : $" , processFunction : \"{field.ProcessFunction}\"" )
				  #>)]
<# } if (field.ViewModelAttributes.Count > 0) { foreach(var attrib in field.ViewModelAttributes) {
#>        <#= attrib #>
<# } } #>        public <#= (field.ViewModelType ?? field.DataType) #> <#= field.Name.ToSchemaName() #> { get; set; }
<#
if (field.References != null && field.References.NameField != null) {  #>
        public string <#=                field.Name.ToSchemaName() + field.References.NameField.Name.ToSchemaName() #> { get; set; }
<#
} #>
<# } #>

<# foreach(var childTable in this.Entity.ChildReferences) { #>
        public List<<#= childTable.Name#>ViewModel> <#= childTable.ParentFieldName #> { get; set; } = new List<<#= childTable.Name#>ViewModel>();
<# } #>
	}
}